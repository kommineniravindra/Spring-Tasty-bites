package com.sathya.controller;


import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.sathya.entity.AuthRequest;
import com.sathya.entity.LoginDetails;
import com.sathya.entity.User;
import com.sathya.repository.UserRepository;
import com.sathya.util.JwtUtil;

@RestController
@RequestMapping("/api/auth")
@CrossOrigin(origins = "http://localhost:5173")
public class AuthController {

    @Autowired
    private UserRepository userRepository;

    @Autowired
    private JwtUtil jwtUtil;

    @Autowired
    private PasswordEncoder passwordEncoder;

    @PostMapping("/signup")
    public ResponseEntity<?> register(@RequestBody User user) {
        Optional<User> existing = userRepository.findByUsername(user.getUsername());
        if (existing.isPresent()) {
            return ResponseEntity.badRequest().body("User already exists");
        }
        user.setPassword(passwordEncoder.encode(user.getPassword()));
        userRepository.save(user);
        return ResponseEntity.ok("Signup successful");
    }

    @PostMapping("/login")
    public ResponseEntity<String> login(@RequestBody LoginDetails loginDetails) {
        if (loginDetails.getUsername().equals("ratan") &&
            loginDetails.getPassword().equals("Ratan@123")) {

            String token = JwtUtil.generateToken(loginDetails.getUsername(), loginDetails.getRole());

            return ResponseEntity.ok()
                    .header("token", "Token generated successfully...")
                    .body(token);
        } else {
            return ResponseEntity.status(HttpStatus.UNAUTHORIZED)
                    .header("token", "username & password fail...")
                    .body("username & password fail...");
        }
    }

}

