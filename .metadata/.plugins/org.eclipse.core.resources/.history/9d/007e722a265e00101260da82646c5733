package com.sathya.service;

import com.sathya.client.OrderFeignClient;
import com.sathya.dto.OrderDTO;
import com.sathya.dto.OrderItemDTO;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;

import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.ZoneOffset;
import java.util.*;
import java.util.stream.Collectors;

@Service
@RequiredArgsConstructor
public class AnalyticsService {

    private final OrderFeignClient orderClient;

    public double getDailyRevenue() {
        LocalDate today = LocalDate.now();
        return orderClient.getAllOrders().stream()
                .filter(order -> order.getOrderDate().toLocalDate().isEqual(today))
                .mapToDouble(OrderDTO::getTotalAmount)
                .sum();
    }

    public double getWeeklyRevenue() {
        LocalDate sevenDaysAgo = LocalDate.now().minusDays(7);
        return orderClient.getAllOrders().stream()
                .filter(order -> !order.getOrderDate().toLocalDate().isBefore(sevenDaysAgo))
                .mapToDouble(OrderDTO::getTotalAmount)
                .sum();
    }

    public List<Map<String, Object>> getTopProducts() {
        Map<String, Map<String, Object>> productStats = new HashMap<>();

        for (OrderDTO order : orderClient.getAllOrders()) {
            for (OrderItemDTO item : order.getItems()) {
                productStats.putIfAbsent(item.getProductName(), new HashMap<>());

                Map<String, Object> stats = productStats.get(item.getProductName());
                stats.put("productName", item.getProductName());
                stats.put("totalSold", (int) stats.getOrDefault("totalSold", 0) + item.getQuantity());
                stats.put("totalRevenue", (double) stats.getOrDefault("totalRevenue", 0.0) + (item.getQuantity() * item.getPrice()));
            }
        }

        return productStats.values().stream()
                .sorted((a, b) -> ((Integer) b.get("totalSold")).compareTo((Integer) a.get("totalSold")))
                .collect(Collectors.toList());
    }
}
